# Generated by Django 5.2.5 on 2025-09-30 05:40

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('questions', '0003_alter_questionimage_question'),
        ('testpaper', '0002_testpaper_level_config'),
    ]

    operations = [
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120)),
                ('student_no', models.CharField(db_index=True, max_length=64, unique=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Attempt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('attempt_token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('started_at', models.DateTimeField()),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.PositiveIntegerField(default=0)),
                ('score', models.FloatField(default=0)),
                ('total_marks', models.FloatField(default=0)),
                ('user_agent', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('meta', models.JSONField(blank=True, default=dict)),
                ('paper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='testpaper.testpaper')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='attempts', to='exam.student')),
            ],
        ),
        migrations.CreateModel(
            name='ChoiceStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_count', models.PositiveIntegerField(default=0)),
                ('wrong_selected_count', models.PositiveIntegerField(default=0)),
                ('choice', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stat', to='questions.choice')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('correct_count', models.PositiveIntegerField(default=0)),
                ('wrong_count', models.PositiveIntegerField(default=0)),
                ('attempts_count', models.PositiveIntegerField(default=0)),
                ('question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stat', to='questions.question')),
            ],
        ),
        migrations.CreateModel(
            name='AttemptAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_choice_ids', models.JSONField(blank=True, default=list)),
                ('text_answer', models.TextField(blank=True, default='')),
                ('is_correct', models.BooleanField(default=False)),
                ('marks_awarded', models.FloatField(default=0)),
                ('time_spent', models.PositiveIntegerField(default=0)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='exam.attempt')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='questions.question')),
            ],
            options={
                'unique_together': {('attempt', 'question')},
            },
        ),
    ]
